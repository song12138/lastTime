<?xml version="1.0" encoding="UTF-8" ?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
  <display-name>Archetype Created Web Application</display-name>

  <!--<filter>-->
    <!--<filter-name>ipfilter</filter-name>-->
    <!--<filter-class>common.filter.IpFilter</filter-class>-->
    <!--<init-param>-->
      <!--<param-name>RejectedlP</param-name>-->
      <!--<param-value>127.0.0.1</param-value>-->
    <!--</init-param>-->
  <!--</filter>-->
<!--<filter-mapping>-->
  <!--<filter-name>ipfilter</filter-name>-->
  <!--<url-pattern>/*</url-pattern>-->
<!--</filter-mapping>-->


  <!--<filter>-->
    <!--<filter-name>parameterFilter</filter-name>-->
    <!--<filter-class>common.filter.ParameterFilter</filter-class>-->
  <!--</filter>-->

  <!--<filter-mapping>-->
    <!--<filter-name>parameterFilter</filter-name>-->
    <!--<url-pattern>/*</url-pattern>-->
  <!--</filter-mapping>-->



  <!--1、spring 框架解决字符串编码问题：过滤器 CharacterEncodingFilter（filter-name） -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--shiro 过滤器-->
  <!--DelegatingFilterProxy会自动到Spring容器中查找名字为shiroFilter的bean并把filter请求交给它处理。-->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>


  <!--&lt;!&ndash;2、在web.xml配置监听器ContextLoaderListener（listener-class） &ndash;&gt;                                                                                                                                                                                    -->
  <!--<listener>-->
    <!--<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
  <!--</listener>-->

  <!--&lt;!&ndash;3、部署applicationContext的xml文件：contextConfigLocation（context-param下的param-name） &ndash;&gt;-->
  <!--<context-param>-->
    <!--<param-name>contextConfigLocation</param-name>-->
    <!--<param-value>classpath*:spring/spring-*.xml</param-value>-->
  <!--</context-param>-->


  <!--项目中使用spring框架有2种方式：
1）listener下的ContextLoaderListener 是一种引入方式，默认读取/WEB-INF/applicationContext.xml
2）若是spring-web项目，DispatcherServlet 也是一种引入方式，默认读取/WEB-INF/${servlet-name}-servlet.xml
倘若以上2种配置都引入了，那么全局性的bean配置文件会被加载2次；而且2种方式的各自配置文件里的配置项在某种意义上并不是合并互补，
而是各成一个体系（虽然普通的bean看似是都加载到全局上下文来了，但还是有一些特殊bean和配置项没有按预期的那样工作）；-->

  <!--4、DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。-->
  <servlet>
    <servlet-name>DispatchServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath*:spring/spring-*.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>DispatchServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>



  <!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>


  <welcome-file-list>
    <welcome-file>/WEB-INF/views/login.jsp</welcome-file>
  </welcome-file-list>


  <!-- 使用shiro配置错误页 -->
  <error-page>
    <error-code>401</error-code>
    <location>/WEB-INF/views/error-page/error401.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/views/error-page/error404.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/views/error-page/error500.jsp</location>
  </error-page>
  
</web-app>
